apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
data:
  prometheus.yml: |-
    # my global config
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              # - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: "prometheus"
        static_configs:
          - targets: ["localhost:9090"]

      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: replace
          source_labels: [__address__]
          regex: '(.*):10250'
          replacement: '${1}:9100'
          target_label: __address__

      - job_name: "k8s-kube-state-metrics-default"
        honor_timestamps: true
        kubernetes_sd_configs:
          - role: service
        scheme: http
        relabel_configs:
          - source_labels: [ __meta_kubernetes_pod_label_app_kubernetes_io_name]
            action: keep
            regex: kube-state-metrics
        metric_relabel_configs:
          - target_label: cluster
            replacement: default

      - job_name: "nvidia-gpu"
        kubernetes_sd_configs:
          - role: pod
        scheme: http
        relabel_configs:
          - source_labels: [ __meta_kubernetes_pod_label_app_kubernetes_io_name]
            action: keep
            regex: dcgm-exporter
          - source_labels: [__meta_kubernetes_pod_host_ip]
            target_label: instance
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node_name

      # - job_name: 'kubernetes-kubelet'
      #   scheme: https
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #     insecure_skip_verify: true
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: node
      #   relabel_configs:
      #   - action: labelmap
      #     regex: __meta_kubernetes_node_label_(.+)

      # - job_name: 'kubernetes-service'
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: service

      # - job_name: 'kubernetes-endpoints'
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: endpoints

      # - job_name: 'kubernetes-ingress'
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: ingress

      # - job_name: 'kubernetes-pods'
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   kubernetes_sd_configs:
      #   - role: pod